---
# Configure SSHD and SFTP

##
## Create SFTP accounts
##

- name: "sshd : add SFTP users"
  ansible.builtin.user:
    name: "{{ item.name }}"
    password: "{{ item.password|default(lookup('password', '/dev/null encrypt=sha512_crypt')) }}"
    shell: "/usr/sbin/nologin"
    # uid: 900+  # any uid value should be fine
    group: "{{ item.group|default(omit) }}"
    home: "{{ item.chroot|default(omit) }}"
    skeleton: no
    state: present
    update_password: "{% if item.password is defined %}always{% else %}on_create{% endif %}"
  loop: "{{ security_sftp_users }}"
  register: __security_sftp_users
  become: yes
  tags:
    - security_sftp_config

# Install the SFTP user's public SSH key on the remote host
#   This will enable future passwordless logins using SSH keys
- name: "sshd : add public key to the SFTP users"
  ansible.posix.authorized_key:
    user: "{{ item.name }}"
    key: "{{ item.sshkey }}"
    comment: "{{ item.name }}"
    state: present
  loop: "{{ security_sftp_users }}"
  when: item.sshkey is defined
  become: yes
  tags:
    - security_sftp_config



##
## Create SFTP folders / set ownership/permissions
##

- name: "ssh : set ownership of SFTP user home directory"
  ansible.builtin.file:
    path: "{{ item.home }}"
    owner: root
    group: root
    mode: 0755
    state: directory
  loop: "{{ __security_sftp_users.results }}"
  when: __security_sftp_users is changed
  become: yes
  tags:
    - security_sftp_config

- name: "ssh : create SFTP user folders"
  ansible.builtin.file:
    path: "{{ item.0.home }}/{{ item.1.name }}"
    owner: "{{ item.0.name }}"
    group: "{{ item.1.group | default(item.0.group) }}"
    mode: "{{ item.1.mode | default('0755') }}"
    state: directory
  with_subelements:
    - "{{ __security_sftp_users.results }}"
    - item.folders
  when: __security_sftp_users is changed
  become: yes
  tags:
    - security_sftp_config



##
## Allow SFTP access via the firewall
##

- name: "ssh : allow SFTP access from specific hosts"
  community.general.ufw:
    rule: allow
    from_ip: "{{ item.host }}"
    proto: tcp
    to_port: "{{ firewall_ssh_port | default('22') }}"
  loop: "{{ security_sftp_users }}"
  become: yes
  when: item.host is defined
  tags:
    - security_sftp_config



##
## Validate SSH config
##

- name: "sshd : install logon banners"
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/etc/{{ item }}"
    owner: root
    group: root
    mode: "0644"
  loop:
    - issue
    - issue.net
  become: yes

- name: "sshd : configure sshd"
  ansible.builtin.template:
    src: sshd_config.j2
    dest: /etc/ssh/sshd_config
    owner: root
    group: root
    mode: 0644
    validate: /usr/sbin/sshd -t -f %s
    backup: yes
  become: yes
  notify: security restart sshd
  tags:
    - security_sftp_config
    - security_ssh_config

- name: "sshd : find any .shosts files"
  ansible.builtin.find:
    paths: /
    hidden: yes
    patterns: ".shosts"
    recurse: yes
  register: __security_shosts_files
  become: yes

- name: "sshd : remove .shosts files"
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ __security_shosts_files.files|flatten(levels=1) }}"
  loop_control:
    label: "{{ item.path }}"
  when: __security_shosts_files.matched|int > 0
  become: yes

- name: "sshd : find any shosts.equiv files"
  ansible.builtin.find:
    paths: /
    hidden: yes
    patterns: "shosts.equiv"
    recurse: yes
  register: __security_shosts_equiv_files
  become: yes

- name: "sshd : Remove shosts.equiv files"
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ __security_shosts_equiv_files.files|flatten(levels=1) }}"
  loop_control:
    label: "{{ item.path }}"
  when: __security_shosts_equiv_files.matched | int > 0
  become: yes


##
## Validate SSH key permissions
##

- name: "sshd : find SSH private keys"
  ansible.builtin.find:
    paths: /etc/ssh/
    patterns: "*key"
  register: __security_ssh_private_keys
  become: yes

- name: "sshd : set the private SSH key permissions"
  ansible.builtin.file:
    path: "{{ item.path }}"
    mode: 0600
  loop: "{{ __security_ssh_private_keys.files|flatten(levels=1) }}"
  loop_control:
    label: "{{ item.path }}"
  when: __security_ssh_private_keys.matched|int > 0
  become: yes

- name: "sshd : find SSH public keys"
  ansible.builtin.find:
    paths: /etc/ssh/
    patterns: "*.pub"
  register: __security_ssh_public_keys
  become: yes

- name: "sshd : set the public SSH key permissions"
  ansible.builtin.file:
    path: "{{ item.path }}"
    mode: 0644
  loop: "{{ __security_ssh_public_keys.files|flatten(levels=1) }}"
  loop_control:
    label: "{{ item.path }}"
  when: __security_ssh_public_keys.matched | int > 0
  become: yes

